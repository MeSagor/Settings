# Modified by Sagor

setopt autocd              # change directory just by typing its name
setopt correct             # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt ksharrays           # arrays start at 0
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# hide EOL sign ('%')
export PROMPT_EOL_MARK=""


# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive tab completion

#enable version control system info
autoload -Uz vcs_info
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr "%F{yellow}%B!%b%F{reset}"
zstyle ':vcs_info:*' stagedstr "%F{green}%B+%b%F{reset}"

#derived from https://www.themoderncoder.com/add-git-branch-information-to-your-zsh-prompt/
zstyle ':vcs_info:git:*' formats $'\Ue0a0''[%b]%u%c%m'

### Display the existence of files not yet known to VCS
### Source: https://github.com/zsh-users/zsh/blob/f9e9dce5443f323b340303596406f9d3ce11d23a/Misc/vcs_info-examples#L155-L170
### git: Show marker (T) if there are untracked files in repository
# Make sure you have added staged to your 'formats':  %c
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked

+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[staged]+="%F{red}%BT%b%F{reset}"
    fi
}



# PROMPT_USER_MACHINE='%F{green}┌──(%B%F{blue}%n%b%F{green})-'
# PROMPT_PATH='[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{green}]'
# PROMPT_GIT='%F{011}${vcs_info_msg_0_}'
# PROMPT_LINE2=$'\n%F{green}└─%B%F{blue}$%b%F{reset} '
# PROMPT='$PROMPT_USER_MACHINE''$PROMPT_PATH''$PROMPT_GIT''$PROMPT_LINE2'
# MY_OLD_PROMPT="%F{cyan}%B%c%b%f%(?:%F{green}%B ❯❯ %b%f:%F{red}%B ❯❯ %b%f)"
PROMPT=$'%F{green}┌──(%B%F{cyan}%n%b%F{green})-[%B%F{reset}%c%b%F{green}] %F{011}${vcs_info_msg_0_}\n%F{green}└─%(?:%B%F{green}>>%b%F{reset}:%B%F{red}>>%b%F{reset}) '




new_line_before_prompt=yes
precmd() {
    # Print a new line before the prompt, but only if it is not the first line
    if [ "$new_line_before_prompt" = yes ]; then
	if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
	    _NEW_LINE_BEFORE_PROMPT=1
	else
	    print ""
	fi
    fi

    vcs_info
}

# Aliases
alias ls="ls -GF"
